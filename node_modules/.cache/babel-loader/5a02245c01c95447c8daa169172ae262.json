{"ast":null,"code":"var _jsxFileName = \"/Users/gokul/Documents/M/mern-ecommerce/admin-app/src/containers/Orders/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"; //import { updateOrder } from \"../../actions\";\n\nimport Layout from \"../../components/Layout\";\nimport Card from \"../../components/UI/Card\";\nimport \"./style.css\";\n/**\n * @author\n * @function Orders\n **/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Orders = props => {\n  _s();\n\n  const order = useSelector(state => state.order); //const [type, setType] = useState(\"\");\n  //const dispatch = useDispatch();\n\n  /* const onOrderUpdate = (orderId) => {\n    const payload = {\n      orderId,\n      type,\n    };\n    dispatch(updateOrder(payload));\n  }; */\n\n  /* const formatDate = (date) => {\n    if (date) {\n      const d = new Date(date);\n      return `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`;\n    }\n    return \"\";\n  }; */\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    sidebar: true,\n    children: order.orders.map((orderItem, index) => /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        margin: \"10px 0\"\n      },\n      headerLeft: orderItem._id,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          boxSizing: \"border-box\",\n          padding: \"100px\"\n          /* display: \"flex\",\n          alignItems: \"center\", */\n\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Orders, \"xiH5Rc+PunLm8kdFs5cxLxRQs2s=\", false, function () {\n  return [useSelector];\n});\n\n_c = Orders;\nexport default Orders;\n\nvar _c;\n\n$RefreshReg$(_c, \"Orders\");","map":{"version":3,"sources":["/Users/gokul/Documents/M/mern-ecommerce/admin-app/src/containers/Orders/index.js"],"names":["React","useState","useDispatch","useSelector","Layout","Card","Orders","props","order","state","orders","map","orderItem","index","margin","_id","boxSizing","padding"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AAEA,OAAO,aAAP;AAEA;AACA;AACA;AACA;;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAMC,KAAK,GAAGL,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACD,KAAlB,CAAzB,CADwB,CAExB;AACA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE,sBACE,QAAC,MAAD;AAAQ,IAAA,OAAO,MAAf;AAAA,cACGA,KAAK,CAACE,MAAN,CAAaC,GAAb,CAAiB,CAACC,SAAD,EAAYC,KAAZ,kBAChB,QAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,MAAM,EAAE;AADH,OADT;AAKE,MAAA,UAAU,EAAEF,SAAS,CAACG,GALxB;AAAA,6BAqCE;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,SAAS,EAAE,YADN;AAELC,UAAAA,OAAO,EAAE;AACT;AACd;;AAJmB;AADT;AAAA;AAAA;AAAA;AAAA;AArCF,OAIOJ,KAJP;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAwGD,CA7HD;;GAAMP,M;UACUH,W;;;KADVG,M;AA+HN,eAAeA,MAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n//import { updateOrder } from \"../../actions\";\nimport Layout from \"../../components/Layout\";\nimport Card from \"../../components/UI/Card\";\n\nimport \"./style.css\";\n\n/**\n * @author\n * @function Orders\n **/\n\nconst Orders = (props) => {\n  const order = useSelector((state) => state.order);\n  //const [type, setType] = useState(\"\");\n  //const dispatch = useDispatch();\n\n  /* const onOrderUpdate = (orderId) => {\n    const payload = {\n      orderId,\n      type,\n    };\n    dispatch(updateOrder(payload));\n  }; */\n\n  /* const formatDate = (date) => {\n    if (date) {\n      const d = new Date(date);\n      return `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`;\n    }\n    return \"\";\n  }; */\n\n  return (\n    <Layout sidebar>\n      {order.orders.map((orderItem, index) => (\n        <Card\n          style={{\n            margin: \"10px 0\",\n          }}\n          key={index}\n          headerLeft={orderItem._id}\n        >\n          {/* <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              padding: \"50px 50px\",\n              alignItems: \"center\",\n            }}\n          >\n            <div>\n              <div className=\"title\">Items</div>\n              {orderItem.items.map((item, index) => (\n                <div className=\"value\" key={index}>\n                  {item.productId.name}\n                </div>\n              ))}\n            </div>\n            <div>\n              <span className=\"title\">Total Price</span>\n              <br />\n              <span className=\"value\">{orderItem.totalAmount}</span>\n            </div>\n            <div>\n              <span className=\"title\">Payment Type</span> <br />\n              <span className=\"value\">{orderItem.paymentType}</span>\n            </div>\n            <div>\n              <span className=\"title\">Payment Status</span> <br />\n              <span className=\"value\">{orderItem.paymentStatus}</span>\n            </div>\n          </div> */}\n          <div\n            style={{\n              boxSizing: \"border-box\",\n              padding: \"100px\",\n              /* display: \"flex\",\n              alignItems: \"center\", */\n            }}\n          >\n            {/* <div className=\"orderTrack\">\n              {orderItem.orderStatus.map((status) => (\n                <div\n                  className={`orderStatus ${status.isCompleted ? \"active\" : \"\"\n                    }`}\n                >\n                  <div\n                    className={`point ${status.isCompleted ? \"active\" : \"\"}`}\n                  ></div>\n                  <div className=\"orderInfo\">\n                    <div className=\"status\">{status.type}</div>\n                    <div className=\"date\">{formatDate(status.date)}</div>\n                  </div>\n                </div>\n              ))}\n            </div> */}\n\n            {/* select input to apply order action */}\n            {/* <div\n              style={{\n                padding: \"0 50px\",\n                boxSizing: \"border-box\",\n              }}\n            >\n              <select onChange={(e) => setType(e.target.value)}>\n                <option value={\"\"}>select status</option>\n                {orderItem.orderStatus.map((status) => {\n                  return (\n                    <>\n                      {!status.isCompleted ? (\n                        <option key={status.type} value={status.type}>\n                          {status.type}\n                        </option>\n                      ) : null}\n                    </>\n                  );\n                })}\n              </select>\n            </div> */}\n            {/* button to confirm action */}\n\n            {/* <div\n              style={{\n                padding: \"0 50px\",\n                boxSizing: \"border-box\",\n              }}\n            >\n              <button onClick={() => onOrderUpdate(orderItem._id)}>\n                confirm\n              </button>\n            </div> */}\n          </div>\n        </Card>\n      ))}\n    </Layout>\n  );\n};\n\nexport default Orders;"]},"metadata":{},"sourceType":"module"}