{"ast":null,"code":"import { categoryConstants } from \"../actions/constants\";\nconst initialState = {\n  categories: [],\n  loading: false,\n  error: null\n};\n\nconst buildNewCategory = (categories, category, id) => {\n  let myCategories = [];\n\n  for (let cat of categories) {\n    if (cat.parentId && cat.parentId == id) {\n      myCategories.push({ ...cat,\n        children: cat.children && cat.children.length > 0 ? buildNewCategory(id, [...cat.children, {\n          _id: category._id,\n          name: category.name,\n          slug: category.slug,\n          parentId: category.parentId,\n          children: category.children\n        }], category) : []\n      });\n    } else {\n      myCategories.push({ ...cat,\n        children: cat.children && cat.children.length > 0 ? buildNewCategory(id, cat.children, category) : []\n      });\n    }\n  }\n\n  return myCategories;\n};\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case categoryConstants.GET_ALL_CATEGORY_SUCCESS:\n      state = { ...state,\n        categories: action.payload.categories\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category;\n      const update = buildNewCategory(state.categories, category);\n      console.log(update);\n      state = { ...state,\n        loading: false\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n      state = { ...initialState\n      };\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/Users/gokul/Documents/M/mern-ecommerce/admin-app/src/reducers/category.reducer.js"],"names":["categoryConstants","initialState","categories","loading","error","buildNewCategory","category","id","myCategories","cat","parentId","push","children","length","_id","name","slug","state","action","type","GET_ALL_CATEGORY_SUCCESS","payload","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","update","console","log","ADD_NEW_CATEGORY_FAILURE"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,sBAAlC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,EADK;AAEjBC,EAAAA,OAAO,EAAE,KAFQ;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;;AAMA,MAAMC,gBAAgB,GAAG,CAACH,UAAD,EAAaI,QAAb,EAAuBC,EAAvB,KAA8B;AAEnD,MAAIC,YAAY,GAAG,EAAnB;;AAEA,OAAK,IAAIC,GAAT,IAAgBP,UAAhB,EAA4B;AAExB,QAAGO,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,IAAgBH,EAAnC,EAAuC;AAEnCC,MAAAA,YAAY,CAACG,IAAb,CAAkB,EACd,GAAGF,GADW;AAEdG,QAAAA,QAAQ,EAAEH,GAAG,CAACG,QAAJ,IAAgBH,GAAG,CAACG,QAAJ,CAAaC,MAAb,GAAsB,CAAtC,GAA0CR,gBAAgB,CAACE,EAAD,EAAK,CAAC,GAAGE,GAAG,CAACG,QAAR,EAAkB;AACvFE,UAAAA,GAAG,EAAER,QAAQ,CAACQ,GADyE;AAEvFC,UAAAA,IAAI,EAAET,QAAQ,CAACS,IAFwE;AAGvFC,UAAAA,IAAI,EAAEV,QAAQ,CAACU,IAHwE;AAIvFN,UAAAA,QAAQ,EAAEJ,QAAQ,CAACI,QAJoE;AAKvFE,UAAAA,QAAQ,EAAEN,QAAQ,CAACM;AALoE,SAAlB,CAAL,EAMhEN,QANgE,CAA1D,GAMM;AARF,OAAlB;AAWH,KAbD,MAaM;AACFE,MAAAA,YAAY,CAACG,IAAb,CAAkB,EACd,GAAGF,GADW;AAEdG,QAAAA,QAAQ,EAAEH,GAAG,CAACG,QAAJ,IAAgBH,GAAG,CAACG,QAAJ,CAAaC,MAAb,GAAsB,CAAtC,GAA0CR,gBAAgB,CAACE,EAAD,EAAKE,GAAG,CAACG,QAAT,EAAmBN,QAAnB,CAA1D,GAAyF;AAFrF,OAAlB;AAIH;AAEJ;;AAED,SAAOE,YAAP;AACH,CA7BD;;AAgCA,gBAAe,CAACS,KAAK,GAAGhB,YAAT,EAAuBiB,MAAvB,KAAkC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKnB,iBAAiB,CAACoB,wBAAvB;AACIH,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJf,QAAAA,UAAU,EAAEgB,MAAM,CAACG,OAAP,CAAenB;AAFvB,OAAR;AAIA;;AACJ,SAAKF,iBAAiB,CAACsB,wBAAvB;AACIL,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJd,QAAAA,OAAO,EAAE;AAFL,OAAR;AAIA;;AACJ,SAAKH,iBAAiB,CAACuB,wBAAvB;AACI,YAAMjB,QAAQ,GAAGY,MAAM,CAACG,OAAP,CAAef,QAAhC;AAEJ,YAAMkB,MAAM,GAAGnB,gBAAgB,CAACY,KAAK,CAACf,UAAP,EAAmBI,QAAnB,CAA/B;AACAmB,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACIP,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJd,QAAAA,OAAO,EAAE;AAFL,OAAR;AAIA;;AACJ,SAAKH,iBAAiB,CAAC2B,wBAAvB;AACIV,MAAAA,KAAK,GAAG,EACJ,GAAGhB;AADC,OAAR;AAGA;AA3BR;;AA8BA,SAAOgB,KAAP;AACH,CAhCD","sourcesContent":["import { categoryConstants } from \"../actions/constants\"\n\nconst initialState = {\n    categories: [],\n    loading: false,\n    error: null\n}\n\nconst buildNewCategory = (categories, category, id) => {\n\n    let myCategories = [];\n\n    for( let cat of categories) {\n\n        if(cat.parentId && cat.parentId == id) {\n\n            myCategories.push({\n                ...cat,\n                children: cat.children && cat.children.length > 0 ? buildNewCategory(id, [...cat.children, {\n                    _id: category._id,\n                    name: category.name,\n                    slug: category.slug,\n                    parentId: category.parentId,\n                    children: category.children\n                }], category) : []\n            })\n\n        }else {\n            myCategories.push({\n                ...cat,\n                children: cat.children && cat.children.length > 0 ? buildNewCategory(id, cat.children, category) : []\n            })\n        }\n        \n    }\n\n    return myCategories;\n}\n\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case categoryConstants.GET_ALL_CATEGORY_SUCCESS:\n            state = {\n                ...state,\n                categories: action.payload.categories\n            }\n            break;\n        case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\n            state = {\n                ...state,\n                loading: true\n            }\n            break;\n        case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n            const category = action.payload.category;\n\n        const update = buildNewCategory(state.categories, category)\n        console.log(update);\n            state = {\n                ...state,\n                loading: false\n            }\n            break;\n        case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n            state = {\n                ...initialState\n            }\n            break;\n    }\n\n    return state;\n}"]},"metadata":{},"sourceType":"module"}