{"ast":null,"code":"var _jsxFileName = \"/Users/gokul/Documents/M/mern-ecommerce/admin-app/src/containers/Category/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Layout from '../../components/Layout';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllCategory, addCategory, updateCategories } from '../../actions';\nimport Input from '../../components/UI/Input';\nimport Modal from '../../components/UI/Modal';\nimport CheckboxTree from 'react-checkbox-tree';\nimport { IoIosCheckboxOutline, IoIosCheckbox, IoIosArrowForward, IoIosArrowDown } from 'react-icons/io';\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css';\n/**\n* @author\n* @function Category\n**/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Category = props => {\n  _s();\n\n  const category = useSelector(state => state.category);\n  const [show, setShow] = useState(false);\n  const [categoryName, setCategoryName] = useState('');\n  const [parentCategoryId, setParentCategoryId] = useState('');\n  const [categoryImage, setCategoryImage] = useState('');\n  const [checked, setChecked] = useState([]);\n  const [expanded, setExpanded] = useState([]);\n  const [checkedArray, setCheckedArray] = useState([]);\n  const [expandedArray, setExpandedArray] = useState([]);\n  const [updateCategoryModal, setUpdateCategoryModal] = useState(false);\n  const [deleteCategoryModal, setDeleteCategoryModal] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleClose = () => {\n    const form = new FormData();\n    form.append('name', categoryName);\n    form.append('parentId', parentCategoryId);\n    form.append('categoryImage', categoryImage);\n    dispatch(addCategory(form));\n    setCategoryName('');\n    setParentCategoryId('');\n    /* const cat = {\n        categoryName,\n        categoryImage,\n        parentCategoryId\n    }; */\n    //console.log(cat);\n\n    setShow(false);\n  };\n\n  const handleShow = () => setShow(true);\n\n  const renderCategories = categories => {\n    let myCategories = [];\n\n    for (let category of categories) {\n      myCategories.push({\n        label: category.name,\n        value: category._id,\n        children: category.children.length > 0 && renderCategories(category.children)\n      });\n    }\n\n    return myCategories;\n  };\n\n  const createCategoryList = (categories, options = []) => {\n    for (let category of categories) {\n      options.push({\n        value: category._id,\n        name: category.name,\n        parentId: category.parentId\n      });\n\n      if (category.children.length > 0) {\n        createCategoryList(category.children, options);\n      }\n    }\n\n    return options;\n  };\n\n  const handleCategoryImage = e => {\n    setCategoryImage(e.target.files[0]);\n  };\n\n  const updateCategory = () => {\n    setUpdateCategoryModal(true);\n    const categories = createCategoryList(category.categories);\n    const checkedArray = [];\n    const expandedArray = [];\n    checked.length > 0 && checked.forEach((categoryId, index) => {\n      const category = categories.find((category, _index) => categoryId === category.value);\n      category && checkedArray.push(category);\n    });\n    expanded.length > 0 && expanded.forEach((categoryId, index) => {\n      const category = categories.find((category, _index) => categoryId === category.value);\n      category && expandedArray.push(category);\n    });\n    setCheckedArray(checkedArray);\n    setExpandedArray(expandedArray);\n    console.log({\n      checked,\n      expanded,\n      categories,\n      checkedArray,\n      expandedArray\n    });\n  };\n\n  const handleCategoryInput = (key, value, index, type) => {\n    if (type === 'checked') {\n      const updatedCheckedArray = checkedArray.map((item, _index) => index === _index ? { ...item,\n        [key]: value\n      } : item);\n      setCheckedArray(updatedCheckedArray);\n    } else if (type === 'expanded') {\n      const updatedExpandedArray = expandedArray.map((item, _index) => index === _index ? { ...item,\n        [key]: value\n      } : item);\n      setExpandedArray(updatedExpandedArray);\n    }\n  };\n\n  const updateCategoriesForm = () => {\n    const form = new FormData();\n    expandedArray.forEach((item, index) => {\n      form.append('_id', item.value);\n      form.append('name', item.name);\n      form.append('parentId', item.parentId ? item.parentId : \"\");\n      form.append('type', item.type);\n    });\n    checkedArray.forEach((item, index) => {\n      form.append('_id', item.value);\n      form.append('name', item.name);\n      form.append('parentId', item.parentId ? item.parentId : \"\");\n      form.append('type', item.type);\n    });\n    dispatch(updateCategories(form));\n    /*  .then(result => {\n         if(result) {\n             dispatch(getAllCategory())\n         }\n     }) */\n\n    setUpdateCategoryModal(false);\n  };\n\n  const renderUpdateCategoriesModal = () => {\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      show: updateCategoryModal,\n      handleClose: updateCategoriesForm,\n      modalTitle: 'Update Categories',\n      size: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: \"Expanded\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), expandedArray.length > 0 && expandedArray.map((item, index) => /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            value: item.name,\n            placeholder: `Category Name`,\n            onChange: e => handleCategoryInput('name', e.target.value, index, 'expanded')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: item.parentId,\n            onChange: e => handleCategoryInput('parentId', e.target.value, index, 'expanded'),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"select category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 37\n            }, this), createCategoryList(category.categories).map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.value,\n              children: [\" \", option.name]\n            }, option.value, true, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 45\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"store\",\n              children: \"Store\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"product\",\n              children: \"Product\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"page\",\n              children: \"Page\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: \"Checked Categories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this), checkedArray.length > 0 && checkedArray.map((item, index) => /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            value: item.name,\n            placeholder: `Category Name`,\n            onChange: e => handleCategoryInput('name', e.target.value, index, 'checked')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: item.parentId,\n            onChange: e => handleCategoryInput('parentId', e.target.value, index, 'checked'),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"select category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 37\n            }, this), createCategoryList(category.categories).map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.value,\n              children: [\" \", option.name]\n            }, option.value, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 45\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"store\",\n              children: \"Store\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"product\",\n              children: \"Product\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"page\",\n              children: \"Page\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderAddCategoryModal = () => {\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      handleClose: handleClose,\n      modalTitle: 'Add New Category',\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        value: categoryName,\n        placeholder: `Category Name`,\n        onChange: e => setCategoryName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"form-control\",\n        value: parentCategoryId,\n        onChange: e => setParentCategoryId(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"select category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this), createCategoryList(category.categories).map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option.value,\n          children: [\" \", option.name]\n        }, option.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        name: \"categoryImage\",\n        onChange: handleCategoryImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderDeleteCategoryModal = () => {\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      modalTitle: \"confirm\",\n      show: deleteCategoryModal,\n      handleClose: () => setDeleteCategoryModal(false),\n      children: \"Are you Sure\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    sidebar: true,\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: 12,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'space-between'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleShow,\n              children: \"Add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: 12,\n          children: /*#__PURE__*/_jsxDEV(CheckboxTree, {\n            nodes: renderCategories(category.categories),\n            checked: checked,\n            expanded: expanded,\n            onCheck: checked => setChecked(checked),\n            onExpand: expanded => setExpanded(expanded),\n            icons: {\n              check: /*#__PURE__*/_jsxDEV(IoIosCheckbox, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 40\n              }, this),\n              uncheck: /*#__PURE__*/_jsxDEV(IoIosCheckboxOutline, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 42\n              }, this),\n              halfCheck: /*#__PURE__*/_jsxDEV(IoIosCheckboxOutline, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 44\n              }, this),\n              expandClose: /*#__PURE__*/_jsxDEV(IoIosArrowForward, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 46\n              }, this),\n              expandOpen: /*#__PURE__*/_jsxDEV(IoIosArrowDown, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 45\n              }, this)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setDeleteCategoryModal(true),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: updateCategory,\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }, this), renderAddCategoryModal(), renderUpdateCategoriesModal(), renderDeleteCategoryModal()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Category, \"ixY1qkhtcQZMuqwSKhKmtDbEuJw=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Category;\nexport default Category;\n\nvar _c;\n\n$RefreshReg$(_c, \"Category\");","map":{"version":3,"sources":["/Users/gokul/Documents/M/mern-ecommerce/admin-app/src/containers/Category/index.js"],"names":["React","useEffect","useState","Layout","Container","Row","Col","useDispatch","useSelector","getAllCategory","addCategory","updateCategories","Input","Modal","CheckboxTree","IoIosCheckboxOutline","IoIosCheckbox","IoIosArrowForward","IoIosArrowDown","Category","props","category","state","show","setShow","categoryName","setCategoryName","parentCategoryId","setParentCategoryId","categoryImage","setCategoryImage","checked","setChecked","expanded","setExpanded","checkedArray","setCheckedArray","expandedArray","setExpandedArray","updateCategoryModal","setUpdateCategoryModal","deleteCategoryModal","setDeleteCategoryModal","dispatch","handleClose","form","FormData","append","handleShow","renderCategories","categories","myCategories","push","label","name","value","_id","children","length","createCategoryList","options","parentId","handleCategoryImage","e","target","files","updateCategory","forEach","categoryId","index","find","_index","console","log","handleCategoryInput","key","type","updatedCheckedArray","map","item","updatedExpandedArray","updateCategoriesForm","renderUpdateCategoriesModal","option","renderAddCategoryModal","renderDeleteCategoryModal","display","justifyContent","check","uncheck","halfCheck","expandClose","expandOpen"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Layout from '../../components/Layout';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllCategory, addCategory, updateCategories } from '../../actions';\nimport Input from '../../components/UI/Input';\nimport Modal from '../../components/UI/Modal';\nimport CheckboxTree from 'react-checkbox-tree';\nimport {\n    IoIosCheckboxOutline,\n    IoIosCheckbox,\n    IoIosArrowForward,\n    IoIosArrowDown\n} from 'react-icons/io';\n\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css';\n\n/**\n* @author\n* @function Category\n**/\n\nconst Category = (props) => {\n\n    const category = useSelector(state => state.category);\n    const [show, setShow] = useState(false);\n    const [categoryName, setCategoryName] = useState('');\n    const [parentCategoryId, setParentCategoryId] = useState('');\n    const [categoryImage, setCategoryImage] = useState('');\n    const [checked, setChecked] = useState([]);\n    const [expanded, setExpanded] = useState([]);\n    const [checkedArray, setCheckedArray] = useState([]);\n    const [expandedArray, setExpandedArray] = useState([]);\n    const [updateCategoryModal, setUpdateCategoryModal] = useState(false);\n    const [deleteCategoryModal, setDeleteCategoryModal] = useState(false);\n    const dispatch = useDispatch();\n\n\n\n    const handleClose = () => {\n\n        const form = new FormData();\n\n        form.append('name', categoryName);\n        form.append('parentId', parentCategoryId);\n        form.append('categoryImage', categoryImage);\n        dispatch(addCategory(form));\n        setCategoryName('');\n        setParentCategoryId('');\n        /* const cat = {\n            categoryName,\n            categoryImage,\n            parentCategoryId\n        }; */\n\n        //console.log(cat);\n        setShow(false);\n    }\n\n    const handleShow = () => setShow(true);\n\n\n    const renderCategories = (categories) => {\n\n        let myCategories = [];\n\n        for (let category of categories) {\n\n            myCategories.push(\n                {\n                    label: category.name,\n                    value: category._id,\n                    children: category.children.length > 0 && renderCategories(category.children)\n                }\n            )\n        }\n        return myCategories;\n    }\n\n\n    const createCategoryList = (categories, options = []) => {\n        for (let category of categories) {\n            options.push({ value: category._id, name: category.name, parentId: category.parentId })\n            if (category.children.length > 0) {\n                createCategoryList(category.children, options)\n            }\n        }\n        return options;\n    }\n\n\n    const handleCategoryImage = (e) => {\n        setCategoryImage(e.target.files[0]);\n\n    }\n\n    const updateCategory = () => {\n        setUpdateCategoryModal(true);\n        const categories = createCategoryList(category.categories);\n        const checkedArray = [];\n        const expandedArray = [];\n        checked.length > 0 && checked.forEach((categoryId, index) => {\n            const category = categories.find((category, _index) => categoryId === category.value);\n            category && checkedArray.push(category);\n        })\n        expanded.length > 0 && expanded.forEach((categoryId, index) => {\n            const category = categories.find((category, _index) => categoryId === category.value);\n            category && expandedArray.push(category);\n        })\n        setCheckedArray(checkedArray);\n        setExpandedArray(expandedArray);\n\n        console.log({ checked, expanded, categories, checkedArray, expandedArray });\n    }\n\n\n    const handleCategoryInput = (key, value, index, type) => {\n        if (type === 'checked') {\n            const updatedCheckedArray = checkedArray.map((item, _index) => index === _index ? { ...item, [key]: value } : item);\n            setCheckedArray(updatedCheckedArray);\n        } else if (type === 'expanded') {\n            const updatedExpandedArray = expandedArray.map((item, _index) => index === _index ? { ...item, [key]: value } : item);\n            setExpandedArray(updatedExpandedArray);\n        }\n    }\n\n\n    const updateCategoriesForm = () => {\n\n        const form = new FormData();\n\n        expandedArray.forEach((item, index) => {\n            form.append('_id', item.value);\n            form.append('name', item.name);\n            form.append('parentId', item.parentId ? item.parentId : \"\");\n            form.append('type', item.type);\n        });\n        checkedArray.forEach((item, index) => {\n            form.append('_id', item.value);\n            form.append('name', item.name);\n            form.append('parentId', item.parentId ? item.parentId : \"\");\n            form.append('type', item.type);\n        });\n        dispatch(updateCategories(form))\n       /*  .then(result => {\n            if(result) {\n                dispatch(getAllCategory())\n            }\n        }) */\n        setUpdateCategoryModal(false);\n    }\n\n\n    const renderUpdateCategoriesModal = () => {\n        return (\n            <Modal\n                show={updateCategoryModal}\n                handleClose={updateCategoriesForm}\n                modalTitle={'Update Categories'}\n                size=\"lg\"\n            >\n                <Row>\n                    <Col>\n                        <h6>Expanded</h6>\n                    </Col>\n                </Row>\n\n                {\n                    expandedArray.length > 0 &&\n                    expandedArray.map((item, index) =>\n                        <Row key={index}>\n\n                            <Col>\n                                <Input\n                                    value={item.name}\n                                    placeholder={`Category Name`}\n                                    onChange={(e) => handleCategoryInput('name', e.target.value, index, 'expanded')}\n                                />\n                            </Col>\n                            <Col>\n                                <select\n                                    className='form-control'\n                                    value={item.parentId}\n                                    onChange={(e) => handleCategoryInput('parentId', e.target.value, index, 'expanded')}>\n                                    <option>select category</option>\n                                    {\n                                        createCategoryList(category.categories).map(option =>\n                                            <option key={option.value} value={option.value}> {option.name}</option>)\n                                    }\n                                </select>\n                            </Col>\n                            <Col>\n                                <select className=\"form-control\">\n                                    <option value=\"\">Select Type</option>\n                                    <option value=\"store\">Store</option>\n                                    <option value=\"product\">Product</option>\n                                    <option value=\"page\">Page</option>\n                                </select>\n                            </Col>\n                        </Row>\n                    )\n                }\n\n                <Row>\n                    <Col>\n                        <h6>Checked Categories</h6>\n                    </Col>\n                </Row>\n\n                {\n                    checkedArray.length > 0 &&\n                    checkedArray.map((item, index) =>\n                        <Row key={index}>\n\n                            <Col>\n                                <Input\n                                    value={item.name}\n                                    placeholder={`Category Name`}\n                                    onChange={(e) => handleCategoryInput('name', e.target.value, index, 'checked')}\n                                />\n                            </Col>\n                            <Col>\n                                <select\n                                    className='form-control'\n                                    value={item.parentId}\n                                    onChange={(e) => handleCategoryInput('parentId', e.target.value, index, 'checked')}>\n                                    <option>select category</option>\n                                    {\n                                        createCategoryList(category.categories).map(option =>\n                                            <option key={option.value} value={option.value}> {option.name}</option>)\n                                    }\n                                </select>\n                            </Col>\n                            <Col>\n                                <select className=\"form-control\">\n                                    <option value=\"\">Select Type</option>\n                                    <option value=\"store\">Store</option>\n                                    <option value=\"product\">Product</option>\n                                    <option value=\"page\">Page</option>\n                                </select>\n                            </Col>\n                        </Row>\n                    )\n                }\n                {/* <input type=\"file\" name=\"categoryImage\" onChange={handleCategoryImage} /> */}\n\n            </Modal>\n        );\n    }\n\n\n    const renderAddCategoryModal = () => {\n        return (\n            <Modal\n                show={show}\n                handleClose={handleClose}\n                modalTitle={'Add New Category'}\n            >\n\n                <Input\n                    value={categoryName}\n                    placeholder={`Category Name`}\n                    onChange={(e) => setCategoryName(e.target.value)}\n                />\n\n                <select\n                    className='form-control'\n                    value={parentCategoryId}\n                    onChange={(e) => setParentCategoryId(e.target.value)}>\n                    <option>select category</option>\n                    {\n                        createCategoryList(category.categories).map(option =>\n                            <option key={option.value} value={option.value}> {option.name}</option>)\n                    }\n                </select>\n\n                <input type=\"file\" name=\"categoryImage\" onChange={handleCategoryImage} />\n\n            </Modal>\n        );\n    }\n\n\n\n    const renderDeleteCategoryModal = () => {\n        return (\n            <Modal \n            modalTitle=\"confirm\"\n            show={deleteCategoryModal}\n            handleClose={() => setDeleteCategoryModal(false)}\n            >\n\n                Are you Sure\n\n            </Modal>\n        );\n    }\n\n\n    return (\n        <Layout sidebar>\n            <Container>\n                <Row>\n                    <Col md={12}>\n                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                            <h3>Category</h3>\n                            <button onClick={handleShow}>Add</button>\n                        </div>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col md={12}>\n                        {/* <ul>\n                            {renderCategories(category.categories)}\n                        </ul> */}\n                        <CheckboxTree\n                            nodes={renderCategories(category.categories)}\n                            checked={checked}\n                            expanded={expanded}\n                            onCheck={checked => setChecked(checked)}\n                            onExpand={expanded => setExpanded(expanded)}\n                            icons={{\n                                check: <IoIosCheckbox />,\n                                uncheck: <IoIosCheckboxOutline />,\n                                halfCheck: <IoIosCheckboxOutline />,\n                                expandClose: <IoIosArrowForward />,\n                                expandOpen: <IoIosArrowDown />\n                            }}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <button onClick={() =>setDeleteCategoryModal(true)}>Delete</button>\n                        <button onClick={updateCategory}>Edit</button>\n                    </Col>\n                </Row>\n            </Container>\n            {renderAddCategoryModal()}\n            {renderUpdateCategoriesModal()}\n            {renderDeleteCategoryModal()}\n        </Layout>\n    )\n\n}\n\nexport default Category;"]},"metadata":{},"sourceType":"module"}